---
import "./Slider.scss";
import slide1 from "@/assets/about-images/slider/image1.png"
import slide2 from "@/assets/about-images/slider/image2.png"
import slide3 from "@/assets/about-images/slider/image3.png"
---

<div class="slider">
    <button class="slider--btn slider--btn__prev">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
        >
            <path d="m15 18-6-6 6-6"></path>
        </svg>
    </button>

    <div class="slides__wrapper">
        <div class="slides">
            <!-- slide 1 -->
            <div class="slide" data-current>
                <div class="slide__inner">
                    <div class="slide--image__wrapper">
                        <img
                            class="slide--image"
                            src={slide1.src}
                            alt="Image 1"
                        />
                    </div>
                </div>
            </div>

            <!-- slide 2 -->
            <div class="slide" data-next>
                <div class="slide__inner">
                    <div class="slide--image__wrapper">
                        <img
                            class="slide--image"
                            src={slide2.src}
                            alt="Image 2"
                        />
                    </div>
                </div>
            </div>
            <div
                class="slide__bg"
                style="--bg: url(https://devloop01.github.io/voyage-slider/images/machu-pichu.jpg); --dir: 1"
                data-next
            >
            </div>

            <!-- slide 3 -->
            <div class="slide" data-previous>
                <div class="slide__inner">
                    <div class="slide--image__wrapper">
                        <img
                            class="slide--image"
                            src={slide3.src}
                            alt="Image 3"
                        />
                    </div>
                </div>
            </div>
            <div
                class="slide__bg"
                style="--bg: url(https://devloop01.github.io/voyage-slider/images/chamonix.jpg); --dir: -1"
                data-previous
            >
            </div>
        </div>
        <div class="slides--infos">
            <!-- Slide Info 1 -->
            <div class="slide-info" data-current>
                <div class="slide-info__inner">
                    <div class="slide-info--text__wrapper">
                        <div data-title class="slide-info--text">
                            <span>Хранение</span>
                        </div>
                        <div data-subtitle class="slide-info--text">
                            <span>отходов</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Slide Info 2 -->
            <div class="slide-info" data-next>
                <div class="slide-info__inner">
                    <div class="slide-info--text__wrapper">
                        <div data-title class="slide-info--text">
                            <span>Перевозка</span>
                        </div>
                        <div data-subtitle class="slide-info--text">
                            <span>по России</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Slide Info 3 -->
            <div class="slide-info" data-previous>
                <div class="slide-info__inner">
                    <div class="slide-info--text__wrapper">
                        <div data-title class="slide-info--text">
                            <span >Утилизация</span>
                        </div>
                        <div data-subtitle class="slide-info--text">
                            <span>I - V</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <button class="slider--btn slider--btn__next">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
        >
            <path d="m9 18 6-6-6-6"></path>
        </svg>
    </button>
</div>

<script>
    const wrap = (n, max) => (n + max) % max;
    const lerp = (a, b, t) => a + (b - a) * t;
    const isHTMLElement = (el) => el instanceof HTMLElement;

    const genId = (() => {
        let count = 0;
        return () => {
            return (count++).toString();
        };
    })();

    class Raf {
        constructor() {
            this.rafId = 0;
            this.raf = this.raf.bind(this);
            this.callbacks = [];

            this.start();
        }

        start() {
            this.raf();
        }

        stop() {
            cancelAnimationFrame(this.rafId);
        }

        raf() {
            this.callbacks.forEach(({ callback, id }) => callback({ id }));
            this.rafId = requestAnimationFrame(this.raf);
        }

        add(callback, id) {
            this.callbacks.push({ callback, id: id || genId() });
        }

        remove(id) {
            this.callbacks = this.callbacks.filter(
                (callback) => callback.id !== id,
            );
        }
    }

    class Vec2 {
        constructor(x = 0, y = 0) {
            this.x = x;
            this.y = y;
        }

        set(x, y) {
            this.x = x;
            this.y = y;
        }

        lerp(v, t) {
            this.x = lerp(this.x, v.x, t);
            this.y = lerp(this.y, v.y, t);
        }
    }

    const vec2 = (x = 0, y = 0) => new Vec2(x, y);

    export function tilt(node, options) {
        let { trigger, target } = resolveOptions(node, options);

        let lerpAmount = 0.06;

        const rotDeg = { current: vec2(), target: vec2() };
        const bgPos = { current: vec2(), target: vec2() };

        const update = (newOptions) => {
            destroy();
            ({ trigger, target } = resolveOptions(node, newOptions));
            init();
        };

        let rafId;

        function ticker({ id }) {
            rafId = id;

            rotDeg.current.lerp(rotDeg.target, lerpAmount);
            bgPos.current.lerp(bgPos.target, lerpAmount);

            for (const el of target) {
                el.style.setProperty(
                    "--rotX",
                    rotDeg.current.y.toFixed(2) + "deg",
                );
                el.style.setProperty(
                    "--rotY",
                    rotDeg.current.x.toFixed(2) + "deg",
                );
                el.style.setProperty(
                    "--bgPosX",
                    bgPos.current.x.toFixed(2) + "%",
                );
                el.style.setProperty(
                    "--bgPosY",
                    bgPos.current.y.toFixed(2) + "%",
                );
            }
        }

        const onMouseMove = ({ offsetX, offsetY }) => {
            lerpAmount = 0.1;

            for (const el of target) {
                const ox = (offsetX - el.clientWidth * 0.5) / (Math.PI * 3);
                const oy = -(offsetY - el.clientHeight * 0.5) / (Math.PI * 4);

                rotDeg.target.set(ox, oy);
                bgPos.target.set(-ox * 0.3, oy * 0.3);
            }
        };

        const onMouseLeave = () => {
            lerpAmount = 0.06;

            rotDeg.target.set(0, 0);
            bgPos.target.set(0, 0);
        };

        const addListeners = () => {
            trigger.addEventListener("mousemove", onMouseMove);
            trigger.addEventListener("mouseleave", onMouseLeave);
        };

        const removeListeners = () => {
            trigger.removeEventListener("mousemove", onMouseMove);
            trigger.removeEventListener("mouseleave", onMouseLeave);
        };

        const init = () => {
            addListeners();
            raf.add(ticker);
        };

        const destroy = () => {
            removeListeners();
            raf.remove(rafId);
        };

        init();

        return { destroy, update };
    }

    function resolveOptions(node, options) {
        return {
            trigger: options?.trigger ?? node,
            target: options?.target
                ? Array.isArray(options.target)
                    ? options.target
                    : [options.target]
                : [node],
        };
    }

    // -----------------------------------------------------

    const raf = new Raf();

    function init() {
        const slides = [...document.querySelectorAll(".slide")];
        const slidesInfo = [...document.querySelectorAll(".slide-info")];

        const buttons = {
            prev: document.querySelector(".slider--btn__prev"),
            next: document.querySelector(".slider--btn__next"),
        };

        slides.forEach((slide, i) => {
            const slideInner = slide.querySelector(".slide__inner");
            const slideInfoInner =
                slidesInfo[i].querySelector(".slide-info__inner");

            tilt(slide, { target: [slideInner, slideInfoInner] });
        });

        buttons.prev.addEventListener("click", change(-1));
        buttons.next.addEventListener("click", change(1));
    }

    function change(direction) {
        return () => {
            let current = {
                slide: document.querySelector(".slide[data-current]"),
                slideInfo: document.querySelector(".slide-info[data-current]"),
            };
            let previous = {
                slide: document.querySelector(".slide[data-previous]"),
                slideInfo: document.querySelector(".slide-info[data-previous]"),
            };
            let next = {
                slide: document.querySelector(".slide[data-next]"),
                slideInfo: document.querySelector(".slide-info[data-next]"),
            };

            Object.values(current).map((el) =>
                el.removeAttribute("data-current"),
            );
            Object.values(previous).map((el) =>
                el.removeAttribute("data-previous"),
            );
            Object.values(next).map((el) => el.removeAttribute("data-next"));

            if (direction === 1) {
                let temp = current;
                current = next;
                next = previous;
                previous = temp;

                current.slide.style.zIndex = "20";
                previous.slide.style.zIndex = "30";
                next.slide.style.zIndex = "10";
            } else if (direction === -1) {
                let temp = current;
                current = previous;
                previous = next;
                next = temp;

                current.slide.style.zIndex = "20";
                previous.slide.style.zIndex = "10";
                next.slide.style.zIndex = "30";
            }

            Object.values(current).map((el) =>
                el.setAttribute("data-current", ""),
            );
            Object.values(previous).map((el) =>
                el.setAttribute("data-previous", ""),
            );
            Object.values(next).map((el) => el.setAttribute("data-next", ""));
        };
    }

    init();
</script>
